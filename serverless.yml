org: vimalmenon
app: api-krishivmenon
service: api-km
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin

custom:
  serverless-offline:
    httpPort: 5000

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  apiGateway:
    binaryMediaTypes:
      - 'application/*'
      - 'image/*'
      - 'multipart/form-data'
  environment:
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    DYNAMO_DB_Table: ${env:DYNAMO_DB_TABLE}
    DB_KEY: ${env:DB_KEY}

functions:
  # drive Apis
  uploadToS3:
    handler: services/drive/uploadToS3.handler
    events:
      - http:
          path: /drive/{folder}
          method: post
          cors: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - s3:PutObject
          - dynamodb:PutItem
        Resource: "*"
  deleteFromS3:
    handler: services/drive/deleteFromS3.handler
    events:
      - http:
          path: /drive/{folder}/{file}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - s3:DeleteObject
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: "*"
  # updateS3File:
  #   handler: services/drive/handler.updateS3File
  #   events:
  #     - http:
  #         path: /drive/{folder}/{file}
  #         method: put
  #         cors: true
  #   iamRoleStatements:
  #     - Effect: "Allow"        
  #       Action:
  #         - s3:ListObject
  #       Resource: "*"
  getFilesFromS3:
    handler: services/drive/getFilesFromS3.handler
    events:
      - http:
          path: /drive/{folder}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query
        Resource: "*"

  # folders api
  getByParentFolder:
    handler: services/folders/getByParentFolder.handler
    events:
      - http:
          path: /folders/parent/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query
        Resource: "*"
  addFolder:
    handler: services/folders/createFolder.handler
    events:
      - http:
          path: /folders
          method: post
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: "*"
  deleteFolder:
    handler: services/folders/deleteFolder.handler
    events:
      - http:
          path: /folders/{id}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: "*"
  updateFolder:
    handler: services/folders/updateFolder.handler
    events:
      - http:
          path: /folders/{id}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: "*"
  updateFolderData:
    handler: services/folders/updateFolderData.handler
    events:
      - http:
          path: /folders/folder_data/{id}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"

  # notes api
  getNotes:
    handler: services/notes/getNotes.handler
    events:
      - http:
          path: /notes
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query
        Resource: "*"
  getNote:
    handler: services/notes/getNote.handler
    events:
      - http:
          path: /notes/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:GetItem
        Resource: "*"
  addNote:
    handler: services/notes/addNote.handler
    events:
      - http:
          path: /notes
          method: post
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: "*"
  deleteNote:
    handler: services/notes/deleteNote.handler
    events:
      - http:
          path: /notes/{id}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: "*"
  updateNote:
    handler: services/notes/updateNote.handler
    events:
      - http:
          path: /notes/{id}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: "*"
